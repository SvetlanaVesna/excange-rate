// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RateConverter /> snapshot test for RateConverter component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RateConvert
    availableRates={
      Array [
        "GBP",
        "EUR",
        "USD",
      ]
    }
    convertIndex={1.1247229670832493}
    error={false}
    exchange={[MockFunction]}
    isFetching={false}
    ratePollStopAction={[MockFunction]}
    resultValue={13.496675604998991}
    selectCurrency={[MockFunction]}
    selectWallet={[MockFunction]}
    selectedWallet={
      Object {
        "content": 2,
        "currency": "GBP",
      }
    }
    setValueToConvert={[MockFunction]}
    sourceCurrency="GBP"
    targetCurrency="EUR"
    targetUserWallet={
      Object {
        "content": 58,
        "currency": "USD",
      }
    }
    userWallets={
      Object {
        "EUR": Object {
          "content": 0,
          "currency": "EUR",
        },
        "GBP": Object {
          "content": 2,
          "currency": "GBP",
        },
        "USD": Object {
          "content": 58,
          "currency": "USD",
        },
      }
    }
    valueToConvert={12}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
