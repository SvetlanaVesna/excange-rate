// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CurrencyInputComponent /> snapshot test for CurrencyInputComponent component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <_default
    error={false}
    setValueToConvert={[MockFunction]}
    sourceCurrency="GBP"
    valueToConvert={12}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span>
          <input
            className="convert_value_input"
            onChange={[Function]}
            placeholder="Input to convert"
            value={12}
          />
        </span>,
        <div>
          GBP
        </div>,
        false,
      ],
      "className": "aside aside-1",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            className="convert_value_input"
            onChange={[Function]}
            placeholder="Input to convert"
            value={12}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "convert_value_input",
            "onChange": [Function],
            "placeholder": "Input to convert",
            "value": 12,
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GBP",
        },
        "ref": null,
        "rendered": "GBP",
        "type": "div",
      },
      false,
    ],
    "type": "aside",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span>
            <input
              className="convert_value_input"
              onChange={[Function]}
              placeholder="Input to convert"
              value={12}
            />
          </span>,
          <div>
            GBP
          </div>,
          false,
        ],
        "className": "aside aside-1",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              className="convert_value_input"
              onChange={[Function]}
              placeholder="Input to convert"
              value={12}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "convert_value_input",
              "onChange": [Function],
              "placeholder": "Input to convert",
              "value": 12,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GBP",
          },
          "ref": null,
          "rendered": "GBP",
          "type": "div",
        },
        false,
      ],
      "type": "aside",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
